"""
Django settings for silflores project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import dj_database_url #type:ignore
import cloudinary
import cloudinary.uploader
import cloudinary.api
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = os.path.join(BASE_DIR.parent, 'data', 'web')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv('DEBUG', '1')))

PAGSEGURO_EMAIL = os.getenv('PAGSEGURO_EMAIL', 'CHANGE-ME')
PAGSEGURO_TOKEN = os.getenv('PAGSEGURO_TOKEN', 'CHANGE-ME')
PAGSEGURO_SANDBOX = bool(int(os.getenv('PAGSEGURO_SANDBOX', 1)))
MELHOR_ENVIO_LINK = os.getenv('MELHOR_ENVIO_LINK')
MELHOR_ENVIO_SANDBOX ="sandbox" in MELHOR_ENVIO_LINK
if(MELHOR_ENVIO_SANDBOX):
    MELHOR_ENVIO_ID = os.getenv('MELHOR_ENVIO_SANDBOX_ID')
    MELHOR_ENVIO_SECRET = os.getenv('MELHOR_ENVIO_SANDBOX_SECRET')
else:
    MELHOR_ENVIO_ID = os.getenv('MELHOR_ENVIO_ID')
    MELHOR_ENVIO_SECRET = os.getenv('MELHOR_ENVIO_SECRET')

ALLOWED_HOSTS = [
    h.strip() for h in os.getenv('ALLOWED_HOSTS', '*').split(',') if h.strip()
]

NGROK_URL = os.getenv('NGROK_URL', 'change-me')

CSRF_TRUSTED_ORIGINS = [
    'https://*.ngrok-free.app'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.postgres',
    'cloudinary',
    'cloudinary_storage',
    'daphne',
    'django.contrib.staticfiles',
    'channels',
    'cart',
    'products',
    'users',
]

ASGI_APPLICATION = 'silflores.routing.application'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

ROOT_URLCONF = 'silflores.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'silflores.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': "django.db.backends.postgresql",
            'NAME': os.getenv('POSTGRES_DB', 'silfloresdb'),
            'USER': os.getenv('POSTGRES_USER', 'silflores'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'silflores@2025'),
            'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        }
    }
    CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
        },
    },
}
else:
    DATABASES = {
        'default': dj_database_url.config(
            default=os.getenv('DATABASE_URL')
        )
    }
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': os.getenv('REDIS_URL'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
    CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [('redis://default:432c4aac83564bb08a597099aeeb1011@fly-silflores-redis.upstash.io:6379')],
        },
    },
}
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    CSRF_TRUSTED_ORIGINS = [
        'https://silflores.fly.dev',
        'https://silflores.com.br',
        'https://www.silflores.com.br',
    ]


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'users.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(DATA_DIR, 'static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(DATA_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'change-me')
EMAIL_PORT = os.getenv('EMAIL_PORT', 'change-me')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'change-me')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'change-me')
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'change-me')

cloudinary.config(
    cloud_name="dkt4xp75j",
    api_key="543416843547874",
    api_secret="R4OfMgbsXJQj7fM7aSHO7nlp-FE",
)

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

ADMIN_NAME = os.getenv("ADMIN_NAME", "CHANGE-ME")
ADMIN_CPF = os.getenv("ADMIN_CPF", "CHANGE-ME")
ADMIN_CNPJ = os.getenv("ADMIN_CNPJ", "CHANGE-ME")
ADMIN_STATE_REGISTER = os.getenv("ADMIN_STATE_REGISTER", "CHANGE-ME")
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL", "CHANGE-ME")
ADMIN_PHONE = os.getenv("ADMIN_PHONE", "CHANGE-ME")
ADMIN_ADDRESS = os.getenv("ADMIN_ADDRESS", "CHANGE-ME")
ADMIN_COMPLEMENT = os.getenv("ADMIN_COMPLEMENT", "CHANGE-ME")
ADMIN_HOME_NUMBER = os.getenv("ADMIN_HOME_NUMBER", "CHANGE-ME")
ADMIN_DISTRICT = os.getenv("ADMIN_DISTRICT", "CHANGE-ME")
ADMIN_CITY = os.getenv("ADMIN_CITY", "CHANGE-ME")
ADMIN_UF = os.getenv("ADMIN_UF", "CHANGE-ME")
ADMIN_COUNTRY = os.getenv("ADMIN_COUNTRY", "CHANGE-ME")
ADMIN_CEP=os.getenv('ADMIN_CEP', 'change-me')
